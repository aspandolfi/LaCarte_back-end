{"version":3,"sources":["../../src/commands/SchemaDropCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAA0C;AAE1C,iFAA8E;AAC9E,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,aAAa,CAAC;QACxB,aAAQ,GAAG,+DAA+D;YACtE,kEAAkE,CAAC;IA+C3E,CAAC;IA7CG,mCAAO,GAAP,UAAQ,KAAU;QACd,MAAM,CAAC,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,qDAAqD;SAClE,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,mCAAO,GAAb,UAAc,IAAS;;;;;;wBAEf,UAAU,GAAyB,SAAS,CAAC;;;;wBAGvC,uBAAuB,GAAG,IAAI,iDAAuB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;wBACpF,qBAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,EAAA;;wBAAtE,iBAAiB,GAAG,SAAkD;wBAC5E,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;4BAC7B,sBAAsB,EAAE,KAAK;4BAC7B,cAAc,EAAE,KAAK;4BACrB,iBAAiB,EAAE,KAAK;4BACxB,OAAO,EAAE;gCACL,UAAU,EAAE,IAAI;gCAChB,mBAAmB,EAAE,IAAI;gCACzB,iBAAiB,EAAE,IAAI;6BAC1B;yBACJ,CAAC,CAAC;wBACU,qBAAM,wBAAgB,CAAC,iBAAiB,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC,CAAC;wBACvD,qBAAM,UAAU,CAAC,YAAY,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;wBAChC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC,CAAC;;;;wBAG3E,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;wBAC5D,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;;;6BAIf,UAAU,EAAV,wBAAU;wBACV,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;;;;;;KAEpC;IACL,wBAAC;AAAD,CAlDA,AAkDC,IAAA;AAlDY,8CAAiB","file":"SchemaDropCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {Connection} from \"../connection/Connection\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nconst chalk = require(\"chalk\");\n\n/**\n * Drops all tables of the database from the given connection.\n */\nexport class SchemaDropCommand {\n    command = \"schema:drop\";\n    describe = \"Drops all tables in the database on your default connection. \" +\n        \"To drop table of a concrete connection's database use -c option.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which to drop all tables.\"\n            })\n            .option(\"cf\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(argv: any) {\n\n        let connection: Connection|undefined = undefined;\n        try {\n\n            const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\n            const connectionOptions = await connectionOptionsReader.get(argv.connection);\n            Object.assign(connectionOptions, {\n                dropSchemaOnConnection: false,\n                autoSchemaSync: false,\n                autoMigrationsRun: false,\n                logging: {\n                    logQueries: true,\n                    logFailedQueryError: true,\n                    logSchemaCreation: true\n                }\n            });\n            connection = await createConnection(connectionOptions);\n            await connection.dropDatabase();\n            console.log(chalk.green(\"Database schema has been successfully dropped.\"));\n\n        } catch (err) {\n            console.log(chalk.black.bgRed(\"Error during schema drop:\"));\n            console.error(err);\n            // throw err;\n\n        } finally {\n            if (connection)\n                await connection.close();\n        }\n    }\n}"],"sourceRoot":".."}