{"version":3,"sources":["../../src/commands/MigrationRevertCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAA0C;AAC1C,iFAA8E;AAE9E,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;GAEG;AACH;IAAA;QAEI,YAAO,GAAG,mBAAmB,CAAC;QAC9B,aAAQ,GAAG,kCAAkC,CAAC;IA6ClD,CAAC;IA3CG,wCAAO,GAAP,UAAQ,KAAU;QACd,MAAM,CAAC,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,8CAA8C;SAC3D,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,wCAAO,GAAb,UAAc,IAAS;;;;;;wBAEf,UAAU,GAAyB,SAAS,CAAC;;;;wBAEvC,uBAAuB,GAAG,IAAI,iDAAuB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;wBACpF,qBAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,EAAA;;wBAAtE,iBAAiB,GAAG,SAAkD;wBAC5E,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;4BAC7B,WAAW,EAAE,EAAE;4BACf,sBAAsB,EAAE,KAAK;4BAC7B,cAAc,EAAE,KAAK;4BACrB,iBAAiB,EAAE,KAAK;4BACxB,OAAO,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,mBAAmB,EAAE,KAAK,EAAE,iBAAiB,EAAE,IAAI,EAAE;yBACtF,CAAC,CAAC;wBACU,qBAAM,wBAAgB,CAAC,iBAAiB,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC,CAAC;wBAEvD,qBAAM,UAAU,CAAC,iBAAiB,EAAE,EAAA;;wBAApC,SAAoC,CAAC;;;;wBAIrC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;wBACjE,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;;;6BAIf,UAAU,EAAV,wBAAU;wBACV,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;;;;;;KAEpC;IAEL,6BAAC;AAAD,CAhDA,AAgDC,IAAA;AAhDY,wDAAsB","file":"MigrationRevertCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {Connection} from \"../connection/Connection\";\nconst chalk = require(\"chalk\");\n\n/**\n * Reverts last migration command.\n */\nexport class MigrationRevertCommand {\n\n    command = \"migrations:revert\";\n    describe = \"Reverts last executed migration.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which run a query.\"\n            })\n            .option(\"cf\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(argv: any) {\n\n        let connection: Connection|undefined = undefined;\n        try {\n            const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\n            const connectionOptions = await connectionOptionsReader.get(argv.connection);\n            Object.assign(connectionOptions, {\n                subscribers: [],\n                dropSchemaOnConnection: false,\n                autoSchemaSync: false,\n                autoMigrationsRun: false,\n                logging: { logQueries: false, logFailedQueryError: false, logSchemaCreation: true }\n            });\n            connection = await createConnection(connectionOptions);\n\n            await connection.undoLastMigration();\n            // console.log(chalk.green(\"Migrations were successfully reverted.\")); // todo: make log inside \"runMigrations\" method\n\n        } catch (err) {\n            console.log(chalk.black.bgRed(\"Error during migration revert:\"));\n            console.error(err);\n            // throw err;\n\n        } finally {\n            if (connection)\n                await connection.close();\n        }\n    }\n\n}"],"sourceRoot":".."}