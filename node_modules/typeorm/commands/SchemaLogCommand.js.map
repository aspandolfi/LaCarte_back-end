{"version":3,"sources":["../../src/commands/SchemaLogCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAA0C;AAE1C,iFAA8E;AAC9E,+CAAwC;AACxC,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;GAEG;AACH;IAAA;QAEI,YAAO,GAAG,YAAY,CAAC;QACvB,aAAQ,GAAG,sGAAsG;YAC7G,+DAA+D,CAAC;IA0DxE,CAAC;IAxDG,kCAAO,GAAP,UAAQ,KAAU;QACd,MAAM,CAAC,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,kEAAkE;SAC/E,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,kCAAO,GAAb,UAAc,IAAS;;;;;;wBAEf,UAAU,GAAyB,SAAS,CAAC;;;;wBAGvC,uBAAuB,GAAG,IAAI,iDAAuB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;wBACpF,qBAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,EAAA;;wBAAtE,iBAAiB,GAAG,SAAkD;wBAC5E,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;4BAC7B,sBAAsB,EAAE,KAAK;4BAC7B,cAAc,EAAE,KAAK;4BACrB,iBAAiB,EAAE,KAAK;4BACxB,OAAO,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,mBAAmB,EAAE,KAAK,EAAE,iBAAiB,EAAE,KAAK,EAAE;yBACvF,CAAC,CAAC;wBACU,qBAAM,wBAAgB,CAAC,iBAAiB,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC,CAAC;wBAC1C,qBAAM,UAAU,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC,GAAG,EAAE,EAAA;;wBAA1D,IAAI,GAAG,SAAmD;wBAChE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;4BACpB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,2FAA2F,CAAC,CAAC,CAAC;wBAE3H,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACE,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,GAAG,EAAH,CAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BACjF,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,iEAAiE,GAAG,gBAAgB,CAAC,CAAC,CAAC;4BAChH,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,kEAAgE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAI,CAAC,CAAC,CAAC;4BAC7H,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,iEAAiE,GAAG,gBAAgB,CAAC,CAAC,CAAC;4BAEhH,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;gCACZ,IAAI,SAAS,GAAG,OAAO,GAAG,KAAK,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;gCACvD,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;gCAC7B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,SAAS,GAAG,SAAS,GAAG,GAAG,CAAC;gCACvE,OAAO,CAAC,GAAG,CAAC,yBAAS,CAAC,SAAS,CAAC,CAAC,CAAC;4BACtC,CAAC,CAAC,CAAC;wBACP,CAAC;;;;wBAGD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC,CAAC;wBACvE,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;;;6BAIf,UAAU,EAAV,wBAAU;wBACV,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;;;;;;KAEpC;IACL,uBAAC;AAAD,CA9DA,AA8DC,IAAA;AA9DY,4CAAgB","file":"SchemaLogCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {Connection} from \"../connection/Connection\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {highlight} from \"cli-highlight\";\nconst chalk = require(\"chalk\");\n\n/**\n * Shows sql to be executed by schema:sync command.\n */\nexport class SchemaLogCommand {\n\n    command = \"schema:log\";\n    describe = \"Shows sql to be executed by schema:sync command. It shows sql log only for your default connection. \" +\n        \"To run update queries on a concrete connection use -c option.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection of which schema sync log should be shown.\"\n            })\n            .option(\"cf\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(argv: any) {\n\n        let connection: Connection|undefined = undefined;\n        try {\n\n            const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\n            const connectionOptions = await connectionOptionsReader.get(argv.connection);\n            Object.assign(connectionOptions, {\n                dropSchemaOnConnection: false,\n                autoSchemaSync: false,\n                autoMigrationsRun: false,\n                logging: { logQueries: false, logFailedQueryError: false, logSchemaCreation: false }\n            });\n            connection = await createConnection(connectionOptions);\n            const sqls = await connection.driver.createSchemaBuilder().log();\n            if (sqls.length === 0) {\n                console.log(chalk.yellow(\"Your schema is up to date - there are no queries to be executed by schema syncronization.\"));\n\n            } else {\n                const lengthSeparators = String(sqls.length).split(\"\").map(char => \"-\").join(\"\");\n                console.log(chalk.yellow(\"---------------------------------------------------------------\" + lengthSeparators));\n                console.log(chalk.yellow.bold(`-- Schema syncronization will execute following sql queries (${chalk.white(sqls.length)}):`));\n                console.log(chalk.yellow(\"---------------------------------------------------------------\" + lengthSeparators));\n\n                sqls.forEach(sql => {\n                    let sqlString = typeof sql === \"string\" ? sql : sql.up;\n                    sqlString = sqlString.trim();\n                    sqlString = sqlString.substr(-1) === \";\" ? sqlString : sqlString + \";\";\n                    console.log(highlight(sqlString));\n                });\n            }\n\n        } catch (err) {\n            console.log(chalk.black.bgRed(\"Error during schema synchronization:\"));\n            console.error(err);\n            // throw err;\n\n        } finally {\n            if (connection)\n                await connection.close();\n        }\n    }\n}"],"sourceRoot":".."}