{"version":3,"sources":["../../src/util/PromiseUtils.ts"],"names":[],"mappings":";;AAAA;;GAEG;AACH;IAAA;IAmBA,CAAC;IAjBG;;;OAGG;IACI,0BAAa,GAApB,UAA2B,UAAe,EAAE,QAAiC;QACzE,IAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,IAAI;YACnC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;gBAChB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBACV,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,mBAAC;AAAD,CAnBA,AAmBC,IAAA;AAnBY,oCAAY","file":"PromiseUtils.js","sourcesContent":["/**\n * Utils to help to work with Promise objects.\n */\nexport class PromiseUtils {\n\n    /**\n     * Runs given callback that returns promise for each item in the given collection in order.\n     * Operations executed after each other, right after previous promise being resolved.\n     */\n    static runInSequence<T, U>(collection: T[], callback: (item: T) => Promise<U>): Promise<U[]> {\n        const results: U[] = [];\n        return collection.reduce((promise, item) => {\n            return promise.then(() => {\n                return callback(item);\n            }).then(result => {\n                results.push(result);\n            });\n        }, Promise.resolve()).then(() => {\n            return results;\n        });\n    }\n\n}"],"sourceRoot":".."}