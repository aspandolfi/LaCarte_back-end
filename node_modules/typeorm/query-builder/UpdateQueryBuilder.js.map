{"version":3,"sources":["../../src/query-builder/UpdateQueryBuilder.ts"],"names":[],"mappings":"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","file":"UpdateQueryBuilder.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {QueryPartialEntity} from \"./QueryPartialEntity\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class UpdateQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createUpdateExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string): this {\n         return this.returning(output);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Values needs to be updated.\n     */\n    set(values: QueryPartialEntity<Entity>): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = [{ type: \"simple\", condition: this.computeWhereParameter(where) }];\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.where(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.andWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.orWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string): this {\n        if (this.connection.driver instanceof SqlServerDriver || this.connection.driver instanceof PostgresDriver) {\n            this.expressionMap.returning = returning;\n            return this;\n        } else throw new Error(\"OUTPUT or RETURNING clause only supported by MS SQLServer or PostgreSQL\");\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    protected createUpdateExpression() {\n        const valuesSet = this.getValueSets();\n\n        // prepare columns and values to be updated\n        const updateColumnAndValues: string[] = [];\n        Object.keys(valuesSet).forEach(columnProperty => {\n            const column = this.expressionMap.mainAlias!.metadata.findColumnWithPropertyName(columnProperty);\n            if (column) {\n                const paramName = \"_updated_\" + column.databaseName;\n                const value = valuesSet[column.propertyName];\n\n                if (value instanceof Function) { // support for SQL expressions in update query\n                    updateColumnAndValues.push(this.escape(column.databaseName) + \" = \" + value());\n                } else {\n                    if (this.connection.driver instanceof SqlServerDriver) {\n                        this.setParameter(paramName, this.connection.driver.parametrizeValue(column, value));\n                    } else {\n                        this.setParameter(paramName, value);\n                    }\n                    updateColumnAndValues.push(this.escape(column.databaseName) + \" = :\" + paramName);\n                }\n            }\n        });\n\n        // get a table name and all column database names\n        const tableName = this.escape(this.getMainTableName());\n        const whereExpression = this.createWhereExpression();\n\n        // generate and return sql update query\n        if (this.expressionMap.returning !== \"\" && this.connection.driver instanceof PostgresDriver) {\n            return `UPDATE ${tableName} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${this.expressionMap.returning}`;\n\n        } else if (this.expressionMap.returning !== \"\" && this.connection.driver instanceof SqlServerDriver) {\n            return `UPDATE ${tableName} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${this.expressionMap.returning}${whereExpression}`;\n\n        } else {\n            return `UPDATE ${tableName} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSets(): ObjectLiteral {\n        if (this.expressionMap.valuesSet instanceof Object)\n            return this.expressionMap.valuesSet;\n\n        throw new Error(`Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify inserted values.`);\n    }\n\n}\n"],"sourceRoot":".."}