{"version":3,"sources":["../../src/driver/mysql/MysqlQueryRunner.ts"],"names":[],"mappings":"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","file":"MysqlQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {MysqlDriver} from \"./MysqlDriver\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {InsertResult} from \"../InsertResult\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\n\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class MysqlQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: MysqlDriver;\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Isolated entity manager working only with current query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {};\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Promise used to obtain a database connection from a pool for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: (string|{ up: string, down: string })[] = [];\n\n    /**\n     * Mode in which query runner executes.\n     * Used for replication.\n     * If replication is not setup its value is ignored.\n     */\n    protected mode: \"master\"|\"slave\";\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: MysqlDriver, mode: \"master\"|\"slave\" = \"master\") {\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.driver.isReplicated) {\n\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        if (this.databaseConnection)\n            this.databaseConnection.release();\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a raw SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const queryStartTime = +new Date();\n                databaseConnection.query(query, parameters, (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n\n                    ok(result);\n                });\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const stream = databaseConnection.query(query, parameters);\n                if (onEnd) stream.on(\"end\", onEnd);\n                if (onError) stream.on(\"error\", onError);\n                ok(stream);\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\\`${key}\\``).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const parameters = keys.map(key => keyValues[key]);\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n        const sql = `INSERT INTO \\`${tableName}\\`(${columns}) VALUES (${values})`;\n        const result = await this.query(sql, parameters);\n\n        const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\n            const value = generatedColumn.isPrimary && result.insertId ? result.insertId : keyValues[generatedColumn.databaseName];\n            if (!value) return map;\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {} as ObjectLiteral);\n\n        return {\n            result: result,\n            generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n        };\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions).join(\" AND \");\n        const sql = `UPDATE \\`${tableName}\\` SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \\`${tableName}\\` WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        // todo: escape column names as well\n        if (hasLevel) {\n            await this.query(\n                `INSERT INTO \\`${tableName}\\`(\\`ancestor\\`, \\`descendant\\`, \\`level\\`) ` +\n                `SELECT \\`ancestor\\`, ${newEntityId}, \\`level\\` + 1 FROM \\`${tableName}\\` WHERE \\`descendant\\` = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`\n            );\n        } else {\n            await this.query(\n                `INSERT INTO \\`${tableName}\\`(\\`ancestor\\`, \\`descendant\\`) ` +\n                `SELECT \\`ancestor\\`, ${newEntityId} FROM \\`${tableName}\\` WHERE \\`descendant\\` = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`\n            );\n        }\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(\\`level\\`) as \\`level\\` FROM \\`${tableName}\\` WHERE \\`descendant\\` = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.sqlMemoryMode)\n            throw new Error(`Loading table schema is not supported in sql memory mode`);\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n        const tablesSql      = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql     = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}'`;\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY' ORDER BY SEQ_IN_INDEX`;\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql)\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n            const primaryKeys: ObjectLiteral[] = await this.query(`SHOW INDEX FROM \\`${dbTable[\"TABLE_NAME\"]}\\` WHERE Key_name = 'PRIMARY'`);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n\n                    const columnType = dbColumn[\"COLUMN_TYPE\"].toLowerCase();\n                    const endIndex = columnType.indexOf(\"(\");\n                    columnSchema.type = endIndex !== -1 ? columnType.substring(0, endIndex) : columnType;\n\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    columnSchema.isPrimary = dbColumn[\"COLUMN_KEY\"].indexOf(\"PRI\") !== -1;\n                    columnSchema.isUnique = dbColumn[\"COLUMN_KEY\"].indexOf(\"UNI\") !== -1;\n                    columnSchema.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\n                    columnSchema.comment = dbColumn[\"COLUMN_COMMENT\"];\n                    columnSchema.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                    columnSchema.scale = dbColumn[\"NUMERIC_SCALE\"];\n                    columnSchema.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                    columnSchema.collation = dbColumn[\"COLLATION_NAME\"];\n\n                    if (columnSchema.type === \"int\" || columnSchema.type === \"tinyint\"\n                        ||  columnSchema.type === \"smallint\" || columnSchema.type === \"mediumint\"\n                        || columnSchema.type === \"bigint\" || columnSchema.type === \"year\") {\n\n                        const length = columnType.substring(columnType.indexOf(\"(\") + 1, columnType.indexOf(\")\"));\n                        columnSchema.length = parseInt(length);\n\n                    } else {\n                        columnSchema.length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"];\n                    }\n\n                    if (columnSchema.type === \"enum\") {\n                        const colType = dbColumn[\"COLUMN_TYPE\"];\n                        const items = colType.substring(colType.indexOf(\"(\") + 1, colType.indexOf(\")\")).split(\",\");\n                        columnSchema.enum = (items as string[]).map(item => {\n                            return item.substring(1, item.length - 1);\n                        });\n                    }\n\n                    if (columnSchema.type === \"datetime\" || columnSchema.type === \"time\" || columnSchema.type === \"timestamp\") {\n                        columnSchema.precision = dbColumn[\"DATETIME_PRECISION\"];\n                    }\n\n                    return columnSchema;\n                });\n\n            // create primary keys\n            tableSchema.primaryKeys = primaryKeys.map(primaryKey => {\n                return new PrimaryKeySchema(primaryKey[\"Key_name\"], primaryKey[\"Column_name\"]);\n            });\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbForeignKeys\n                .filter(dbForeignKey => dbForeignKey[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n                })\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const currentDbIndices = dbIndices.filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName);\n                    const columnNames = currentDbIndices.map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\n\n                    // find a special index - unique index and\n                    if (currentDbIndices.length === 1 && currentDbIndices[0][\"NON_UNIQUE\"] === 0) {\n                        const column = tableSchema.columns.find(column => column.name === currentDbIndices[0][\"INDEX_NAME\"] && column.name === currentDbIndices[0][\"COLUMN_NAME\"]);\n                        if (column) {\n                            column.isUnique = true;\n                            return;\n                        }\n                    }\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, currentDbIndices[0][\"NON_UNIQUE\"] === 0);\n                })\n                .filter(index => !!index) as IndexSchema[]; // remove empty returns\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(table: TableSchema|string): Promise<boolean> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(table: TableSchema|string, column: ColumnSchema|string): Promise<boolean> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const columnName = column instanceof ColumnSchema ? column.name : column;\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a schema if it's not created.\n     */\n    createSchema(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table from the given table schema and column schemas inside it.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\n        let sql = `CREATE TABLE \\`${table.name}\\` (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\\`${column.name}\\``).join(\", \")})`;\n        sql += `) ENGINE=${table.engine || \"InnoDB\"}`;\n\n        const revertSql = `DROP TABLE \\`${table.name}\\``;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Drop the table.\n     */\n    async dropTable(table: TableSchema|string): Promise<void> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const sql = `DROP TABLE \\`${tableName}\\``;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \\`${tableName}\\` ADD ${this.buildCreateColumnSql(column, false)}`;\n        const revertSql = `ALTER TABLE \\`${tableName}\\` DROP \\`${column.name}\\``;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName); // todo: throw exception, this wont work because of sql memory enabled. remove support by table name\n            if (!tableSchema)\n                throw new Error(`Table ${tableSchemaOrName} was not found.`);\n        }\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (newColumn.isUnique === false && oldColumn.isUnique === true)\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP INDEX \\`${oldColumn.name}\\``); // todo: add revert code\n\n        const sql = `ALTER TABLE \\`${tableSchema.name}\\` CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, oldColumn.isPrimary)}`;\n        const revertSql = `ALTER TABLE \\`${tableSchema.name}\\` CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, oldColumn.isPrimary)}`;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(table: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(table, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        const sql = `ALTER TABLE \\`${table.name}\\` DROP \\`${column.name}\\``;\n        const revertSql = `ALTER TABLE \\`${table.name}\\` ADD ${this.buildCreateColumnSql(column, false)}`;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\n        if (!tableSchema.hasGeneratedColumn)\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP PRIMARY KEY`);\n\n        const primaryColumnNames = tableSchema.columns\n            .filter(column => column.isPrimary && !column.isGenerated)\n            .map(column => \"`\" + column.name + \"`\");\n        if (primaryColumnNames.length > 0) {\n            const sql = `ALTER TABLE \\`${tableSchema.name}\\` ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`;\n            const revertSql = `ALTER TABLE \\`${tableSchema.name}\\` DROP PRIMARY KEY`;\n            return this.schemaQuery(sql, revertSql);\n        }\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => \"`\" + column + \"`\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"`\" + column + \"`\").join(\",\");\n        let sql = `ALTER TABLE \\`${tableName}\\` ADD CONSTRAINT \\`${foreignKey.name}\\` ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \\`${foreignKey.referencedTableName}\\`(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        const revertSql = `ALTER TABLE \\`${tableName}\\` DROP FOREIGN KEY \\`${foreignKey.name}\\``;\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \\`${tableName}\\` DROP FOREIGN KEY \\`${foreignKey.name}\\``;\n\n        const columnNames = foreignKey.columnNames.map(column => \"`\" + column + \"`\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"`\" + column + \"`\").join(\",\");\n        let revertSql = `ALTER TABLE \\`${tableName}\\` ADD CONSTRAINT \\`${foreignKey.name}\\` ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \\`${foreignKey.referencedTableName}\\`(${referencedColumnNames})`;\n        if (foreignKey.onDelete) revertSql += \" ON DELETE \" + foreignKey.onDelete;\n\n        return this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(table: TableSchema|string, index: IndexSchema): Promise<void> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const columns = index.columnNames.map(columnName => \"`\" + columnName + \"`\").join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \\`${index.name}\\` ON \\`${tableName}\\`(${columns})`;\n        const revertSql = `ALTER TABLE \\`${tableName}\\` DROP INDEX \\`${index.name}\\``;\n        await this.schemaQuery(sql, revertSql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(table: TableSchema|string, index: IndexSchema|string): Promise<void> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        const indexName = index instanceof IndexSchema ? index.name : index;\n        const sql = `ALTER TABLE \\`${tableName}\\` DROP INDEX \\`${indexName}\\``;\n\n        if (index instanceof IndexSchema) {\n            const columns = index.columnNames.map(columnName => \"`\" + columnName + \"`\").join(\", \");\n            const revertSql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \\`${index.name}\\` ON \\`${tableName}\\`(${columns})`;\n            await this.schemaQuery(sql, revertSql);\n\n        } else {\n            await this.query(sql);\n        }\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(table: TableSchema|string): Promise<void> {\n        const tableName = table instanceof TableSchema ? table.name : table;\n        await this.query(`TRUNCATE TABLE \\`${tableName}\\``);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \\`', table_name, '\\`;') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes sql used special for schema build.\n     */\n    protected async schemaQuery(upQuery: string, downQuery: string): Promise<void> {\n\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true) {\n            this.sqlsInMemory.push({ up: upQuery, down: downQuery });\n            return Promise.resolve() as Promise<any>;\n        }\n\n        await this.query(upQuery);\n    }\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.database!;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map(key => `\\`${key}\\`=?`);\n    }\n\n    /**\n     * Builds a part of query to create/change a column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\n        let c = \"`\" + column.name + \"` \" + this.connection.driver.createFullType(column);\n        if (column.enum)\n            c += \"(\" + column.enum.map(value => \"'\" + value + \"'\").join(\", \") +  \")\";\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isUnique === true)\n            c += \" UNIQUE\";\n        if (column.isGenerated && column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTO_INCREMENT\";\n        if (column.comment)\n            c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT \" + column.default;\n\n        return c;\n    }\n\n}"],"sourceRoot":"../.."}