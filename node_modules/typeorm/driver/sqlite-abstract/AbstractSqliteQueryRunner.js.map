{"version":3,"sources":["../../src/driver/sqlite-abstract/AbstractSqliteQueryRunner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,6FAA0F;AAC1F,qFAAkF;AAClF,yEAAsE;AACtE,gEAA6D;AAC7D,uEAAoE;AACpE,uEAAoE;AACpE,iFAA8E;AAC9E,iFAA8E;AAC9E,8DAA2D;AAO3D;;;;;GAKG;AACH;IAoDI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,mCAAY,MAA4B;QAnCxC;;;WAGG;QACH,eAAU,GAAG,KAAK,CAAC;QAEnB;;WAEG;QACH,wBAAmB,GAAG,KAAK,CAAC;QAE5B;;;WAGG;QACH,SAAI,GAAG,EAAE,CAAC;QAEV,4EAA4E;QAC5E,uBAAuB;QACvB,4EAA4E;QAE5E;;WAEG;QACO,kBAAa,GAAY,KAAK,CAAC;QAEzC;;WAEG;QACO,iBAAY,GAAa,EAAE,CAAC;IAMK,CAAC;IAE5C,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,2CAAO,GAAP;QACI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACH,2CAAO,GAAP;QACI,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACG,oDAAgB,GAAtB;;;;;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;4BACzB,MAAM,IAAI,+DAA8B,EAAE,CAAC;wBAE/C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;wBAChC,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAA;;wBAArC,SAAqC,CAAC;;;;;KACzC;IAED;;;OAGG;IACG,qDAAiB,GAAvB;;;;;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;4BAC1B,MAAM,IAAI,uDAA0B,EAAE,CAAC;wBAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;wBAA1B,SAA0B,CAAC;wBAC3B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;KACpC;IAED;;;OAGG;IACG,uDAAmB,GAAzB;;;;;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;4BAC1B,MAAM,IAAI,uDAA0B,EAAE,CAAC;wBAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAA;;wBAA5B,SAA4B,CAAC;wBAC7B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;KACpC;IAED;;OAEG;IACH,yCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;QACnC,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;IAC5G,CAAC;IAED;;OAEG;IACH,0CAAM,GAAN,UAAO,KAAa,EAAE,UAAkB,EAAE,KAAgB,EAAE,OAAkB;QAC1E,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACG,0CAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB;;;gBACpD,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;;;KAC3G;IAED;;OAEG;IACG,0CAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,UAAyB;;;;;;wBACzE,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACtD,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC5F,KAAK,GAAG,cAAW,SAAS,eAAS,YAAY,UAAI,eAAe,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,CAAE,CAAC;wBAC5G,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC,CAAC;wBACjE,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC,CAAC;wBACtE,aAAa,GAAG,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;wBAC3D,qBAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,aAAa,CAAC,EAAA;;wBAAtC,SAAsC,CAAC;;;;;KAC1C;IAED;;OAEG;IACG,0CAAM,GAAZ,UAAa,SAAiB,EAAE,UAAgC,EAAE,eAAuB;;;;;;wBAC/E,eAAe,GAAG,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC3G,UAAU,GAAG,UAAU,YAAY,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAC,UAA4B,CAAC,GAAG,CAAC,EAAlC,CAAkC,CAAC,GAAG,eAAe,CAAC;wBAErI,GAAG,GAAG,mBAAgB,SAAS,iBAAW,eAAiB,CAAC;wBAClE,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;wBAAjC,SAAiC,CAAC;;;;;KACrC;IAED;;OAEG;IACG,0DAAsB,GAA5B,UAA6B,SAAiB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;;;;;wBAC1F,GAAG,GAAG,EAAE,CAAC;wBACb,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACX,GAAG,GAAG,mBAAgB,SAAS,iDAAuC;iCAClE,0BAAsB,WAAW,+BAAuB,SAAS,kCAA0B,QAAQ,MAAG,CAAA;iCACtG,sBAAoB,WAAW,UAAK,WAAW,QAAK,CAAA,CAAC;wBAC7D,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,GAAG,GAAG,mBAAgB,SAAS,sCAA8B;iCACzD,0BAAsB,WAAW,gBAAU,SAAS,kCAA0B,QAAQ,MAAG,CAAA;iCACzF,sBAAoB,WAAW,UAAK,WAAa,CAAA,CAAC;wBAC1D,CAAC;wBACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;wBACW,qBAAM,IAAI,CAAC,KAAK,CAAC,qCAAmC,SAAS,4BAAuB,QAAU,CAAC,EAAA;;wBAA1H,OAAO,GAAoB,SAA+F;wBAChI,sBAAO,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;;;;KAC/F;IAED;;OAEG;IACG,mDAAe,GAArB,UAAsB,SAAiB;;;;;4BACd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAA;;wBAAvD,YAAY,GAAG,SAAwC;wBAC7D,sBAAO,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;KAChE;IAED;;OAEG;IACG,oDAAgB,GAAtB,UAAuB,UAAoB;;;;;;;wBACvC,6CAA6C;wBAC7C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;4BAClC,MAAM,gBAAC,EAAE,EAAC;wBAER,gBAAgB,GAAG,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,MAAI,SAAS,MAAG,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAGhD,qBAAM,IAAI,CAAC,KAAK,CAAC,mEAAiE,gBAAgB,MAAG,CAAC,EAAA;;wBAAlI,QAAQ,GAAoB,SAAsG;wBAExI,yDAAyD;wBACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;4BAC9B,MAAM,gBAAC,EAAE,EAAC;wBAEd,yCAAyC;wBACzC,sBAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAM,OAAO;;;;;;4CACnC,WAAW,GAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;4CAGY,qBAAM,OAAO,CAAC,GAAG,CAAC;oDAC/E,IAAI,CAAC,KAAK,CAAC,yBAAsB,OAAO,CAAC,MAAM,CAAC,QAAI,CAAC;oDACrD,IAAI,CAAC,KAAK,CAAC,yBAAsB,OAAO,CAAC,MAAM,CAAC,QAAI,CAAC;oDACrD,IAAI,CAAC,KAAK,CAAC,+BAA4B,OAAO,CAAC,MAAM,CAAC,QAAI,CAAC;iDAC9D,CAAC,EAAA;;4CAJI,KAA2D,SAI/D,EAJK,SAAS,QAAA,EAAE,SAAS,QAAA,EAAE,aAAa,QAAA;4CAOtC,uBAAuB,GAAqB,SAAS,CAAC;4CACpD,QAAQ,GAAW,OAAO,CAAC,KAAK,CAAC,CAAC;4CACxC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gDAC3C,uBAAuB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;gDAC1E,KAAK,GAAG,uBAAuB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gDACjD,OAAO,GAAG,uBAAuB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gDACzD,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oDACf,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oDAChE,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC,EAAE,uBAAuB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;oDACvG,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,uBAAuB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gDAExG,CAAC;gDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oDACxB,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;oDAClE,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC,EAAE,uBAAuB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;oDACvG,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,uBAAuB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gDACxG,CAAC;4CACL,CAAC;4CAED,gDAAgD;4CAChD,WAAW,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;gDACxC,IAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;gDACxC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;gDACrC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;gDACnD,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,YAAY,CAAC,KAAK,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;gDACpI,YAAY,CAAC,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gDACpD,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gDAC9C,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC,aAAa;gDACxC,YAAY,CAAC,WAAW,GAAG,uBAAuB,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC;gDACxE,IAAM,iBAAiB,GAAG,aAAa;qDAClC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,MAAM,CAAC,KAAK,QAAQ,CAAC,MAAM,CAAC,EAAvC,CAAuC,CAAC;qDAC7D,GAAG,CAAC,UAAA,UAAU;oDACX,6IAA6I;oDAC7I,oFAAoF;oDACpF,IAAM,GAAG,GAAM,OAAO,CAAC,MAAM,CAAC,SAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,SAAI,UAAU,CAAC,OAAO,CAAC,SAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;oDAC1H,IAAM,OAAO,GAAG,KAAK,GAAG,iCAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oDAChE,MAAM,CAAC,IAAI,mCAAgB,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,2FAA2F;gDAC7N,CAAC,CAAC,CAAC;gDACP,WAAW,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;gDAC9C,MAAM,CAAC,YAAY,CAAC;4CACxB,CAAC,CAAC,CAAC;4CAEH,4BAA4B;4CAC5B,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS;qDACtB,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAxB,CAAwB,CAAC;qDACzC,GAAG,CAAC,UAAM,KAAK;;;;oEACwB,qBAAM,IAAI,CAAC,KAAK,CAAC,yBAAsB,KAAK,CAAC,MAAM,CAAC,QAAI,CAAC,EAAA;;gEAAvF,UAAU,GAAoB,SAAyD;gEACvF,YAAY,GAAG,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,MAAM,CAAC,EAAjB,CAAiB,CAAC,CAAC;gEACpE,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;oEAC5B,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,mCAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;gEACnF,CAAC,CAAC,CAAC;;;;qDACN,CAAC,CAAC,EAAA;;4CATP,4BAA4B;4CAC5B,SAQO,CAAC;4CAGF,eAAe,GAAG,SAAS;iDAC5B,MAAM,CAAC,UAAA,OAAO;gDACX,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,IAAI;oDAC7B,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,MAAM,CAAC,EAAnC,CAAmC,CAAC,CAAC;oDAClF,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,MAAM,CAAC,EAAnC,CAAmC,CAAC,CAAC,CAAC;4CAC3F,CAAC,CAAC;iDACD,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,EAAf,CAAe,CAAC;iDAC/B,MAAM,CAAC,UAAC,KAAK,EAAE,KAAK,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAA7B,CAA6B,CAAC,CAAC,SAAS;iDACvE,GAAG,CAAC,UAAM,WAAW;;;;;4DACZ,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,KAAK,WAAW,EAA/B,CAA+B,CAAC,CAAC;4DACvC,qBAAM,IAAI,CAAC,KAAK,CAAC,yBAAsB,OAAQ,CAAC,MAAM,CAAC,QAAI,CAAC,EAAA;;4DAA1F,UAAU,GAAoB,SAA4D;4DAC1F,YAAY,GAAG,UAAU;iEAC1B,IAAI,CAAC,UAAC,UAAU,EAAE,UAAU,IAAK,OAAA,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAA7D,CAA6D,CAAC;iEAC/F,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,MAAM,CAAC,EAAjB,CAAiB,CAAC,CAAC;4DAEzC,2EAA2E;4DAC3E,EAAE,CAAC,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,kBAAkB,CAAC,MAAM,CAAC,KAAK,kBAAkB,CAAC,CAAC,CAAC;gEAC/E,EAAE,CAAC,CAAC,OAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oEAC3B,mCAAmC;oEACnC,YAAY,CAAC,OAAO,CAAC,UAAA,UAAU;wEAC3B,IAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,EAA1B,CAA0B,CAAC,CAAC;wEAC9E,EAAE,CAAC,CAAC,MAAM,CAAC;4EACP,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;oEAC/B,CAAC,CAAC,CAAC;gEACP,CAAC;gEAED,MAAM,gBAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC;4DAEtC,CAAC;4DAAC,IAAI,CAAC,CAAC;gEACE,QAAQ,GAAG,OAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,OAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gEACxE,MAAM,gBAAC,IAAI,yBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAQ,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,QAAQ,CAAC,EAAC;4DACtF,CAAC;;;;iDACJ,CAAC,CAAC;4CAES,qBAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,EAAA;;4CAA5C,OAAO,GAAG,SAAkC;4CAClD,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAkB,CAAC;4CAExE,sBAAO,WAAW,EAAC;;;iCACtB,CAAC,CAAC,EAAC;;;;KACP;IAED;;OAEG;IACG,4CAAQ,GAAd,UAAe,SAAiB;;;;;;wBACtB,GAAG,GAAG,kEAAgE,SAAS,MAAG,CAAC;wBAC1E,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAA9B,MAAM,GAAG,SAAqB;wBACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;KACvC;IAED;;OAEG;IACH,gDAAY,GAAZ;QACI,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACG,+CAAW,GAAjB,UAAkB,KAAkB;;;;;;;wBAE1B,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAChG,GAAG,GAAG,oBAAiB,KAAK,CAAC,IAAI,YAAM,iBAAmB,CAAC;wBACzD,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC,CAAC;wBAClG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;4BAC7B,GAAG,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAG,MAAM,CAAC,IAAM,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC,gEAAgE;wBAC7J,GAAG,IAAI,GAAG,CAAC;wBACX,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;;;KACzB;IAED;;OAEG;IACG,6CAAS,GAAf,UAAgB,SAAiB;;;;;;wBACzB,GAAG,GAAG,kBAAe,SAAS,OAAG,CAAC;wBACtC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;;;KACzB;IAED;;OAEG;IACG,6CAAS,GAAf,UAAgB,SAAiB,EAAE,UAAkB;;;;;;wBAC3C,GAAG,GAAG,yBAAsB,SAAS,QAAI,CAAC;wBACf,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAAhD,OAAO,GAAoB,SAAqB;wBACtD,sBAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,KAAK,UAAU,EAA7B,CAA6B,CAAC,EAAC;;;;KAClE;IAED;;OAEG;IACG,6CAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;;;;4BACnD,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;wBAA1D,WAAW,GAAG,SAA4C;wBAC1D,cAAc,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;wBAC3C,cAAc,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACpC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,WAAW,CAAC,EAAA;;wBAArD,SAAqD,CAAC;;;;;KACzD;IAED;;OAEG;IACG,8CAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;;;;4BACvD,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;wBAA1D,WAAW,GAAG,SAA4C;wBAC1D,cAAc,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;wBAC3C,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;wBACnC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,WAAW,CAAC,EAAA;;wBAArD,SAAqD,CAAC;;;;;KACzD;IAED;;OAEG;IACG,gDAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;;;;;wBAExI,WAAW,GAA0B,SAAS,CAAC;6BAC/C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;wBACxC,WAAW,GAAG,iBAAiB,CAAC;;4BAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;wBAA3D,WAAW,GAAG,SAA6C,CAAC;;;wBAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;4BACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;wBAE7D,SAAS,GAA2B,SAAS,CAAC;wBAClD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;4BAChD,SAAS,GAAG,qBAAqB,CAAC;wBACtC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;wBAC1F,CAAC;wBAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;4BACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;wBAExG,SAAS,GAA2B,SAAS,CAAC;wBAClD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;4BAChD,SAAS,GAAG,qBAAqB,CAAC;wBACtC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;4BAC9B,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;wBAC3C,CAAC;wBAED,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,EAAC;;;;KAC/D;IAED;;OAEG;IACG,gDAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;;;;;wBACrH,WAAW,GAA0B,SAAS,CAAC;6BAC/C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;wBACxC,WAAW,GAAG,iBAAiB,CAAC;;4BAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;wBAA3D,WAAW,GAAG,SAA6C,CAAC;;;wBAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;4BACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;wBAE7D,SAAS,GAA2B,SAAS,CAAC;wBAClD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;4BAChD,SAAS,GAAG,qBAAqB,CAAC;wBACtC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;wBAC1F,CAAC;wBAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;4BACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;wBAE5G,oDAAoD;wBACpD,sBAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAC;;;;KAC1C;IAED;;;OAGG;IACG,iDAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;gBAChH,oDAAoD;gBACpD,sBAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAC;;;KAC1C;IAED;;OAEG;IACG,8CAAU,GAAhB,UAAiB,KAAkB,EAAE,MAAoB;;;gBACrD,sBAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,EAAC;;;KAC5C;IAED;;OAEG;IACG,+CAAW,GAAjB,UAAkB,KAAkB,EAAE,OAAuB;;;;gBACnD,mBAAmB,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;gBAC1C,mBAAmB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC3C,sBAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAC;;;KAClD;IAED;;OAEG;IACG,qDAAiB,GAAvB,UAAwB,OAAoB;;;gBACxC,sBAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAC;;;KACtC;IAED;;OAEG;IACG,oDAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;;gBACtF,sBAAO,IAAI,CAAC,iBAAiB,CAAC,iBAAwB,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC;;;KACzE;IAED;;OAEG;IACG,qDAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;;;;4BACtE,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;wBAA1D,WAAW,GAAG,SAA4C;wBAC1D,kBAAkB,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;wBAC/C,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;wBAC/C,sBAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAC;;;;KACjD;IAED;;OAEG;IACG,kDAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;;gBACpF,sBAAO,IAAI,CAAC,eAAe,CAAC,iBAAwB,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC;;;KACvE;IAED;;OAEG;IACG,mDAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;;;;4BACpE,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;wBAA1D,WAAW,GAAG,SAA4C;wBAC1D,kBAAkB,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;wBAC/C,kBAAkB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;wBAClD,sBAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAC;;;;KACjD;IAED;;OAEG;IACG,+CAAW,GAAjB,UAAkB,SAAiB,EAAE,KAAkB;;;;;;wBAC7C,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,OAAI,UAAU,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC/E,GAAG,GAAG,aAAU,KAAK,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,iBAAU,KAAK,CAAC,IAAI,gBAAS,SAAS,WAAK,WAAW,MAAG,CAAC;wBAC/G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;;;KACzB;IAED;;OAEG;IACG,6CAAS,GAAf,UAAgB,SAAiB,EAAE,SAAiB;;;;;;wBAC1C,GAAG,GAAG,kBAAe,SAAS,OAAG,CAAC;wBACxC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;wBAArB,SAAqB,CAAC;;;;;KACzB;IAED;;OAEG;IACG,4CAAQ,GAAd,UAAe,SAAiB;;;;4BAC5B,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,SAAS,OAAG,CAAC,EAAA;;wBAA9C,SAA8C,CAAC;;;;;KAClD;IAED;;OAEG;IACG,iDAAa,GAAnB;;;;;;4BACI,qBAAM,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,EAAA;;wBAA9C,SAA8C,CAAC;wBAC/C,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;wBAA7B,SAA6B,CAAC;;;;wBAEpB,gBAAgB,GAAG,wHAAsH,CAAC;wBAC3G,qBAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAA;;wBAAjE,WAAW,GAAoB,SAAkC;wBACvE,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC,EAAA;;wBAA/D,SAA+D,CAAC;wBAChE,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;wBAA9B,SAA8B,CAAC;;;;;;;wBAI3B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;wBAAhC,SAAgC,CAAC;;;;;6BAErC,MAAM,OAAK,CAAC;6BAGZ,qBAAM,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,EAAA;;wBAA7C,SAA6C,CAAC;;;;;;KAErD;IAED;;;;OAIG;IACH,mDAAe,GAAf;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACH,oDAAgB,GAAhB;QACI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,gDAAY,GAAZ;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,+CAAW,GAArB,UAAsB,aAA4B,EAAE,UAAsB;QAAtB,2BAAA,EAAA,cAAsB;QACtE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,OAAI,GAAG,OAAG,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;IACxG,CAAC;IAED;;OAEG;IACO,wDAAoB,GAA9B,UAA+B,MAAoB;QAC/C,IAAI,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QAClC,EAAE,CAAC,CAAC,MAAM,YAAY,+BAAc,CAAC,CAAC,CAAC;YACnC,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACjD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC7D,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;YACjB,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC;QACxC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;YAC3B,CAAC,IAAI,WAAW,CAAC;QACrB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC;YACzB,CAAC,IAAI,SAAS,CAAC;QACnB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,IAAI,IAAI,MAAM,CAAC,kBAAkB,KAAK,WAAW,CAAC;YACzE,CAAC,IAAI,4BAA4B,CAAC;QAEtC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YAC1D,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;QAC7C,CAAC;QAED,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAEe,iDAAa,GAA7B,UAA8B,WAAwB,EAAE,cAA4B,EAAE,WAAkB;QAAlB,4BAAA,EAAA,kBAAkB;;;;;;;wBAG9F,iBAAiB,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAnC,CAAmC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACxG,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAEjF,IAAI,GAAG,8BAA2B,WAAW,CAAC,IAAI,YAAM,iBAAmB,CAAC;wBAChF,8CAA8C;wBAC9C,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;4BACtC,IAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,OAAI,IAAI,OAAG,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC/E,IAAM,qBAAqB,GAAG,UAAU,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,OAAI,IAAI,OAAG,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACnG,IAAI,IAAI,mBAAiB,WAAW,uBAAiB,UAAU,CAAC,mBAAmB,WAAK,qBAAqB,MAAG,CAAC;4BACjH,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;gCAAC,IAAI,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;wBACzE,CAAC,CAAC,CAAC;wBAEG,iBAAiB,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC,CAAC;wBACxG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;4BAC7B,IAAI,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAG,MAAM,CAAC,IAAM,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC,+DAA+D;wBAE7J,IAAI,IAAI,GAAG,CAAC;wBAEZ,8CAA8C;wBAE9C,yCAAyC;wBACzC,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;wBAHtB,8CAA8C;wBAE9C,yCAAyC;wBACzC,SAAsB,CAAC;wBAGjB,cAAc,GAAG,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC;6BAGtH,WAAW,EAAX,wBAAW;wBACL,IAAI,GAAG,6BAA0B,WAAW,CAAC,IAAI,WAAK,cAAc,iBAAY,cAAc,gBAAU,WAAW,CAAC,IAAI,OAAG,CAAC;wBAClI,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;wBAAtB,SAAsB,CAAC;;;wBAIrB,IAAI,GAAG,kBAAe,WAAW,CAAC,IAAI,OAAG,CAAC;wBAChD,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;wBAAtB,SAAsB,CAAC;wBAGjB,IAAI,GAAG,6BAA0B,WAAW,CAAC,IAAI,uBAAgB,WAAW,CAAC,IAAI,OAAG,CAAC;wBAC3F,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;wBAAtB,SAAsB,CAAC;wBAGjB,aAAa,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,EAAzC,CAAyC,CAAC,CAAC;wBAClG,mFAAmF;wBACnF,qBAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAA,2BAA2B,CAAC,EAAA;;wBAD3D,mFAAmF;wBACnF,SAA2D,CAAC;;;;;KAC/D;IAED;;OAEG;IACa,kDAAc,GAA9B,UAA+B,iBAAqC;;;;;;6BAC5D,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;wBACxC,sBAAO,iBAAiB,EAAC;4BAEL,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;wBAA3D,WAAW,GAAG,SAA6C;wBACjE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;4BACb,MAAM,IAAI,KAAK,CAAC,iBAAe,iBAAiB,oCAAiC,CAAC,CAAC;wBAEvF,sBAAO,WAAW,EAAC;;;;KAE1B;IAEL,gCAAC;AAAD,CAzqBA,AAyqBC,IAAA;AAzqBY,8DAAyB","file":"AbstractSqliteQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {RandomGenerator} from \"../../util/RandomGenerator\";\nimport {AbstractSqliteDriver} from \"./AbstractSqliteDriver\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {InsertResult} from \"../InsertResult\";\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class AbstractSqliteQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: AbstractSqliteDriver;\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Isolated entity manager working only with current query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {};\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: AbstractSqliteDriver) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        return Promise.resolve(this.driver.databaseConnection);\n    }\n\n    /**\n     * Releases used database connection.\n     * We don't do anything here because sqlite do not support multiple connections thus query runners.\n     */\n    release(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.isTransactionActive = true;\n        await this.query(\"BEGIN TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new Error(\"Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers\");\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by sqlite driver.`);\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n        throw new Error(\"Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers\");\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\n        const query = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(query, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\") ` +\n                `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n\n        // load tables, columns, indices and foreign keys\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables || !dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\n\n            // load columns and indices\n            const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\n            ]);\n\n            // find column name with auto increment\n            let autoIncrementColumnName: string|undefined = undefined;\n            const tableSql: string = dbTable[\"sql\"];\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                if (comma !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n\n                } else if (bracket !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                }\n            }\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns.map(dbColumn => {\n                const columnSchema = new ColumnSchema();\n                columnSchema.name = dbColumn[\"name\"];\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\n                columnSchema.comment = \"\"; // todo later\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\n                const columnForeignKeys = dbForeignKeys\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\n                    .map(foreignKey => {\n                        // const keyName = this.driver.namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\n                        // todo: figure out solution here, name should be same as naming strategy generates!\n                        const key = `${dbTable[\"name\"]}_${[foreignKey[\"from\"]].join(\"_\")}_${foreignKey[\"table\"]}_${[foreignKey[\"to\"]].join(\"_\")}`;\n                        const keyName = \"fk_\" + RandomGenerator.sha1(key).substr(0, 27);\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\n                    });\n                tableSchema.addForeignKeys(columnForeignKeys);\n                return columnSchema;\n            });\n\n            // create primary key schema\n            await Promise.all(dbIndices\n                .filter(index => index[\"origin\"] === \"pk\")\n                .map(async index => {\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n                    indexColumns.forEach(indexColumn => {\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\n                    });\n                }));\n\n            // create index schemas from the loaded indices\n            const indicesPromises = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"origin\"] !== \"pk\" &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\n                })\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(async dbIndexName => {\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos\n                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]))\n                        .map(indexInfo => indexInfo[\"name\"]);\n\n                    // check if db index is generated by sqlite itself and has special use case\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\n                            // so we find and update the column\n                            indexColumns.forEach(columnName => {\n                                const column = tableSchema.columns.find(column => column.name === columnName);\n                                if (column)\n                                    column.isUnique = true;\n                            });\n                        }\n\n                        return Promise.resolve(undefined);\n\n                    } else {\n                        const isUnique = dbIndex![\"unique\"] === \"1\" || dbIndex![\"unique\"] === 1;\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, isUnique);\n                    }\n                });\n\n            const indices = await Promise.all(indicesPromises);\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a schema if it's not created.\n     */\n    createSchema(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        // skip columns with foreign keys, we will add them later\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\n        const columns: ObjectLiteral[] = await this.query(sql);\n        return !!columns.find(column => column[\"name\"] === columnName);\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns([column]);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns(columns);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        return this.dropColumns(table, [column]);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const updatingTableSchema = table.clone();\n        updatingTableSchema.removeColumns(columns);\n        return this.recreateTable(updatingTableSchema);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        return this.recreateTable(dbTable);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.addForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.removeForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        const sql = `DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF;`);\n        await this.startTransaction();\n        try {\n            const selectDropsQuery = `select 'drop table \"' || name || '\";' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.query(`PRAGMA foreign_keys = ON;`);\n        }\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=$\" + (startIndex + index + 1));\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema): string {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column instanceof ColumnMetadata) {\n            c += \" \" + this.driver.normalizeType(column);\n        } else {\n            c += \" \" + this.connection.driver.createFullType(column);\n        }\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isUnique === true)\n            c += \" UNIQUE\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" PRIMARY KEY AUTOINCREMENT\";\n\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            c += \" DEFAULT (\" + column.default + \")\";\n        }\n\n        return c;\n    }\n\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema, migrateData = true): Promise<void> {\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\n        // const createForeignKeys = options && options.createForeignKeys;\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\n\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\n        // if (options && options.createForeignKeys) {\n        tableSchema.foreignKeys.forEach(foreignKey => {\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\n        });\n\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\n\n        sql1 += \")\";\n\n        // todo: need also create uniques and indices?\n\n        // recreate a table with a temporary name\n        await this.query(sql1);\n\n        // we need only select data from old columns\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\n\n        // migrate all data from the table into temporary table\n        if (migrateData) {\n            const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\n            await this.query(sql2);\n        }\n\n        // drop old table\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\n        await this.query(sql3);\n\n        // rename temporary table\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\n        await this.query(sql4);\n\n        // also re-create indices\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\n    }\n\n    /**\n     * If given value is a table name then it loads its table schema representation from the database.\n     */\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\n        if (tableSchemaOrName instanceof TableSchema) {\n            return tableSchemaOrName;\n        } else {\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\n            if (!tableSchema)\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\n\n            return tableSchema;\n        }\n    }\n\n}\n"],"sourceRoot":"../.."}