{"version":3,"sources":["../browser/src/entity-schema/EntitySchemaTransformer.ts"],"names":[],"mappings":"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","file":"EntitySchemaTransformer.js","sourcesContent":["import {EntitySchema} from \"./EntitySchema\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMuplipleColumnsOptions\";\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\nimport {GeneratedMetadataArgs} from \"../metadata-args/GeneratedMetadataArgs\";\n\n/**\n * Transforms entity schema into metadata args storage.\n * The result will be just like entities read from decorators.\n */\nexport class EntitySchemaTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Transforms entity schema into new metadata args storage object.\n     */\n    transform(schemas: EntitySchema[]): MetadataArgsStorage {\n        const metadataArgsStorage = new MetadataArgsStorage();\n\n        schemas.forEach(schema => {\n\n            // add table metadata args from the schema\n            const tableSchema = schema.table || {} as any;\n            const table: TableMetadataArgs = {\n                target: schema.target || schema.name,\n                name: tableSchema.name,\n                type: tableSchema.type || \"regular\",\n                orderBy: tableSchema.orderBy\n            };\n            metadataArgsStorage.tables.push(table);\n\n            // add columns metadata args from the schema\n            Object.keys(schema.columns).forEach(columnName => {\n                const columnSchema = schema.columns[columnName];\n                let mode: ColumnMode = \"regular\";\n                if (columnSchema.createDate)\n                    mode = \"createDate\";\n                if (columnSchema.updateDate)\n                    mode = \"updateDate\";\n                if (columnSchema.version)\n                    mode = \"version\";\n                if (columnSchema.treeChildrenCount)\n                    mode = \"treeChildrenCount\";\n                if (columnSchema.treeLevel)\n                    mode = \"treeLevel\";\n\n                const columnAgrs: ColumnMetadataArgs = {\n                    target: schema.target || schema.name,\n                    mode: mode,\n                    propertyName: columnName,\n                    options: {\n                        type: columnSchema.type,\n                        name: columnSchema.name,\n                        length: columnSchema.length,\n                        primary: columnSchema.primary,\n                        unique: columnSchema.unique,\n                        nullable: columnSchema.nullable,\n                        comment: columnSchema.comment,\n                        default: columnSchema.default,\n                        precision: columnSchema.precision,\n                        scale: columnSchema.scale\n                    }\n                };\n                metadataArgsStorage.columns.push(columnAgrs);\n\n                if (columnSchema.generated) {\n                    const generationArgs: GeneratedMetadataArgs = {\n                        target: schema.target || schema.name,\n                        propertyName: columnName,\n                        strategy: typeof columnSchema.generated === \"string\" ? columnSchema.generated : \"increment\"\n                    };\n                    metadataArgsStorage.generations.push(generationArgs);\n                }\n            });\n\n            // add relation metadata args from the schema\n            if (schema.relations) {\n                Object.keys(schema.relations).forEach(relationName => {\n                    const relationSchema = schema.relations[relationName];\n                    const relation: RelationMetadataArgs = {\n                        target: schema.target || schema.name,\n                        propertyName: relationName,\n                        relationType: relationSchema.type,\n                        isLazy: relationSchema.isLazy || false,\n                        type: relationSchema.target,\n                        inverseSideProperty: relationSchema.inverseSide,\n                        isTreeParent: relationSchema.isTreeParent,\n                        isTreeChildren: relationSchema.isTreeChildren,\n                        options: {\n                            cascadeAll: relationSchema.cascadeAll,\n                            cascadeInsert: relationSchema.cascadeInsert,\n                            cascadeUpdate: relationSchema.cascadeUpdate,\n                            cascadeRemove: relationSchema.cascadeRemove,\n                            nullable: relationSchema.nullable,\n                            onDelete: relationSchema.onDelete\n                        }\n                    };\n\n                    metadataArgsStorage.relations.push(relation);\n\n                    // add join column\n                    if (relationSchema.joinColumn) {\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        } else {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinColumn.name,\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        }\n                    }\n\n                    // add join table\n                    if (relationSchema.joinTable) {\n                        if (typeof relationSchema.joinTable === \"boolean\") {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        } else {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinTable.name,\n                                joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\n                                inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        }\n                    }\n                });\n            }\n\n            // add relation metadata args from the schema\n            if (schema.indices) {\n                Object.keys(schema.indices).forEach(indexName => {\n                    const indexSchema = schema.indices[indexName];\n                    const indexAgrs: IndexMetadataArgs = {\n                        target: schema.target || schema.name,\n                        name: indexName,\n                        unique: indexSchema.unique,\n                        sparse: indexSchema.sparse,           \n                        columns: indexSchema.columns\n                    };\n                    metadataArgsStorage.indices.push(indexAgrs);                        \n                });\n            }    \n\n        });\n\n        return metadataArgsStorage;\n    }\n}"],"sourceRoot":".."}