{"version":3,"sources":["../browser/src/driver/oracle/OracleQueryRunner.ts"],"names":[],"mappings":"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","file":"OracleQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {OracleDriver} from \"./OracleDriver\";\nimport {Connection} from \"../../connection/Connection\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\n\n/**\n * Runs queries on a single oracle database connection.\n *\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\n */\nexport class OracleQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: OracleDriver;\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Isolated entity manager working only with current query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {};\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlsInMemory: string[] = [];\n\n    /**\n     * Mode in which query runner executes.\n     * Used for replication.\n     * If replication is not setup its value is ignored.\n     */\n    protected mode: \"master\"|\"slave\";\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: OracleDriver, mode: \"master\"|\"slave\" = \"master\") {\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.isReleased = true;\n            if (this.databaseConnection) {\n                this.databaseConnection.close((err: any) => {\n                    if (err)\n                        return fail(err);\n\n                    ok();\n                });\n            }\n        });\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        // await this.query(\"START TRANSACTION\");\n        this.isTransactionActive = true;\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const queryStartTime = +new Date();\n\n                const handler = (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n\n                    ok(result.rows || result.outBinds);\n                };\n                const executionOptions = {\n                    autoCommit: this.isTransactionActive ? false : true\n                };\n\n                const databaseConnection = await this.connect();\n                databaseConnection.execute(query, parameters || {}, executionOptions, handler);\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by Oracle driver.`);\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<any> {\n        // todo: fix generated columns\n        let generatedColumn: ColumnMetadata|undefined;\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map(key => \":\" + key).join(\", \");\n        const parameters = keys.map(key => keyValues[key]);\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n        if (generatedColumns.length > 0)\n            generatedColumn = generatedColumns.find(column => column.isPrimary && column.isGenerated);\n\n        const insertSql = columns.length > 0\n            ? `INSERT INTO \"${tableName}\" (${columns}) VALUES (${values})`\n            : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        if (generatedColumn) {\n            const sql2 = `declare lastId number; begin ${insertSql} returning \"${generatedColumn.databaseName}\" into lastId; dbms_output.enable; dbms_output.put_line(lastId); dbms_output.get_line(:ln, :st); end;`;\n            const saveResult = await this.query(sql2, parameters.concat([\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.STRING, maxSize: 32767 },\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.NUMBER }\n            ]));\n            return parseInt(saveResult[0]);\n        } else {\n            return this.query(insertSql, parameters);\n        }\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions).join(\" AND \");\n        const sql = `UPDATE \"${tableName}\" SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM \"${tableName}\" WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        let sql = \"\";\n        if (hasLevel) {\n            sql =   `INSERT INTO \"${tableName}\"(\"ancestor\", \"descendant\", \"level\") ` +\n                    `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql =   `INSERT INTO \"${tableName}\" (\"ancestor\", \"descendant\") ` +\n                    `SELECT \"ancestor\", ${newEntityId} FROM \"${tableName}\" WHERE \"descendant\" = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(\"level\") as \"level\" FROM \"${tableName}\" WHERE \"descendant\" = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql      = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql     = `SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (${tableNamesString})`;\n        const indicesSql     = `SELECT ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS, LISTAGG(cols.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY cols.COLUMN_NAME) AS COLUMN_NAMES\n                                FROM USER_INDEXES ind, USER_IND_COLUMNS cols \n                                WHERE ind.INDEX_NAME = cols.INDEX_NAME AND ind.TABLE_NAME IN (${tableNamesString})\n                                GROUP BY ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS`;\n        // const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\n        // const uniqueKeysSql  = `SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = '${this.dbName}' AND CONSTRAINT_TYPE = 'UNIQUE'`;\n        const constraintsSql = `SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (${tableNamesString}) \nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position`;\n        const [dbTables, dbColumns, dbIndices, /*dbForeignKeys, dbUniqueKeys, */constraints]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            // this.query(foreignKeysSql),\n            // this.query(uniqueKeysSql),\n            this.query(constraintsSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return dbTables.map(dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const isPrimary = !!constraints\n                        .find(constraint => {\n                            return  constraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"P\" &&\n                                    constraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                        });\n                    // TODO fix\n                    let columnType = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                    if (dbColumn[\"DATA_TYPE\"].toLowerCase() === \"varchar2\" && dbColumn[\"DATA_LENGTH\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_LENGTH\"] + \")\";\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null && dbColumn[\"DATA_SCALE\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \",\" + dbColumn[\"DATA_SCALE\"] + \")\";\n                    } else if (dbColumn[\"DATA_SCALE\"] !== null) {\n                        columnType += \"(0,\" + dbColumn[\"DATA_SCALE\"] + \")\";\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \")\";\n                    }\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = columnType;\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"NULLABLE\"] !== \"N\";\n                    columnSchema.isPrimary = isPrimary;\n                    columnSchema.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\"; // todo\n                    columnSchema.comment = \"\"; // todo\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = constraints\n                .filter(constraint =>\n                    constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"P\"\n                )\n                .map(constraint =>\n                    new PrimaryKeySchema(constraint[\"CONSTRAINT_NAME\"], constraint[\"COLUMN_NAME\"])\n                );\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = constraints\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"R\")\n                .map(constraint => new ForeignKeySchema(constraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n                })\n                .map(dbIndex => {\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndex[\"INDEX_NAME\"], dbIndex[\"COLUMN_NAMES\"], !!(dbIndex[\"COLUMN_NAMES\"] === \"UNIQUE\"));\n                });\n\n            return tableSchema;\n        });\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a schema if it's not created.\n     */\n    createSchema(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: string): Promise<void> {\n        let sql = `DROP TABLE \"${tableName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\n\n            if (newColumn.isGenerated) {\n                if (tableSchema.primaryKeys.length > 0 && oldColumn.isPrimary) {\n                    // console.log(tableSchema.primaryKeys);\n                    const dropPrimarySql = `ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"${tableSchema.primaryKeys[0].name}\"`;\n                    await this.query(dropPrimarySql);\n                }\n\n                // since modifying identity column is not supported yet, we need to recreate this column\n                const dropSql = `ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`;\n                await this.query(dropSql);\n\n                const createSql = `ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`;\n                await this.query(createSql);\n\n            } else {\n                const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" DROP IDENTITY`;\n                await this.query(sql);\n\n            }\n        }\n\n        if (newColumn.isNullable !== oldColumn.isNullable) {\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} ${newColumn.isNullable ? \"NULL\" : \"NOT NULL\"}`;\n            await this.query(sql);\n\n        } else if (this.connection.driver.createFullType(newColumn) !== this.connection.driver.createFullType(oldColumn)) { // elseif is used because\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)}`;\n            await this.query(sql);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(table: TableSchema, column: ColumnSchema): Promise<void> {\n        return this.query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void> {\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => \"\\\"\" + primaryKey.columnName + \"\\\"\");\n        // console.log(dbTable.primaryKeys);\n        if (dbTable.primaryKeys.length > 0 && dbTable.primaryKeys[0].name)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${dbTable.primaryKeys[0].name}\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\",\");\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        const columns = index.columnNames.map(columnName => \"\\\"\" + columnName + \"\\\"\").join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE\" : \"\"} INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        const sql = `ALTER TABLE \"${tableName}\" DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \"', table_name, '\";') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlsInMemory = [];\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[] {\n        return this.sqlsInMemory;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return (this.driver.options.schema || this.driver.options.schemaName) as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map(key => `\"${key}\"=:${key}`);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema) {\n        let c = `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        // if (column.isPrimary === true && addPrimary)\n        //     c += \" PRIMARY KEY\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" GENERATED BY DEFAULT ON NULL AS IDENTITY\";\n        // if (column.comment) // todo: less priority, fix it later\n        //     c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            c += \" DEFAULT \" + column.default;\n        }\n\n        return c;\n    }\n\n\n}"],"sourceRoot":"../.."}