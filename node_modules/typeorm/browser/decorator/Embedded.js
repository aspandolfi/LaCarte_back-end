import { getMetadataArgsStorage } from "../index";
/**
 * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the
 * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the
 * embedded will be mapped to it from the single table.
 *
 * Array option works only in monogodb.
 *
 * @deprecated use @Column(type => EmbeddedModel) instead
 */
export function Embedded(typeFunction, options) {
    return function (object, propertyName) {
        var reflectMetadataType = Reflect && Reflect.getMetadata ? Reflect.getMetadata("design:type", object, propertyName) : undefined;
        var isArray = reflectMetadataType === Array || (options && options.array === true) ? true : false;
        var args = {
            target: object.constructor,
            propertyName: propertyName,
            isArray: isArray,
            prefix: options && options.prefix !== undefined ? options.prefix : undefined,
            type: typeFunction
        };
        getMetadataArgsStorage().embeddeds.push(args);
    };
}

//# sourceMappingURL=Embedded.js.map
