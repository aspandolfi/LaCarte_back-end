{"version":3,"sources":["../browser/src/decorator/entity/Entity.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,aAAa,CAAC;AAgBnD;;;GAGG;AACH,MAAM,iBAAiB,aAAoC,EAAE,YAA4B;IACrF,IAAM,IAAI,GAAG,OAAO,aAAa,KAAK,QAAQ,GAAG,aAAa,GAAG,SAAS,CAAC;IAC3E,IAAM,OAAO,GAAG,OAAO,aAAa,KAAK,QAAQ,GAAG,aAA8B,GAAG,YAAY,CAAC;IAElG,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,IAAI,GAAsB;YAC5B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS;YACjE,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS;YAC9D,QAAQ,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC;SACrD,CAAC;QACF,sBAAsB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC;AACN,CAAC","file":"Entity.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(options?: EntityOptions): Function;\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(name?: string, options?: EntityOptions): Function;\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(nameOrOptions?: string|EntityOptions, maybeOptions?: EntityOptions): Function {\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : undefined;\n    const options = typeof nameOrOptions === \"object\" ? nameOrOptions as EntityOptions : maybeOptions;\n\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            engine: options && options.engine ? options.engine : undefined,\n            skipSync: !!(options && options.skipSync === true)\n        };\n        getMetadataArgsStorage().tables.push(args);\n    };\n}\n"],"sourceRoot":"../.."}