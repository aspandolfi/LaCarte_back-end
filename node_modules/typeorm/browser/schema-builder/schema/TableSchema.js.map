{"version":3,"sources":["../browser/src/schema-builder/schema/TableSchema.ts"],"names":[],"mappings":"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","file":"TableSchema.js","sourcesContent":["import {ColumnSchema} from \"./ColumnSchema\";\nimport {IndexSchema} from \"./IndexSchema\";\nimport {ForeignKeySchema} from \"./ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"./PrimaryKeySchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {Driver} from \"../../driver/Driver\";\n\n/**\n * Table schema in the database represented in this class.\n */\nexport class TableSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Table name.\n     */\n    name: string;\n\n    /**\n     * Table columns.\n     */\n    columns: ColumnSchema[] = [];\n\n    /**\n     * Table indices.\n     */\n    indices: IndexSchema[] = [];\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: ForeignKeySchema[] = [];\n\n    /**\n     * Table primary keys.\n     */\n    primaryKeys: PrimaryKeySchema[] = [];\n\n    /**\n     * Indicates if table schema was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new table schemas.\n     */\n    justCreated: boolean = false;\n\n    /**\n     * Table engine.\n     */\n    engine?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string, columns?: ColumnSchema[]|ObjectLiteral[], justCreated?: boolean, engine?: string) {\n        this.name = name;\n        if (columns) {\n            this.columns = (columns as any[]).map(column => { // as any[] is a temporary fix (some weird compiler error)\n                if (column instanceof ColumnSchema) {\n                    return column;\n                } else {\n                    return new ColumnSchema(column);\n                }\n            });\n        }\n\n        if (justCreated !== undefined)\n            this.justCreated = justCreated;\n\n        this.engine = engine;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets only those primary keys that does not\n     */\n    get primaryKeysWithoutGenerated(): PrimaryKeySchema[] {\n        const generatedColumn = this.columns.find(column => column.isGenerated);\n        if (!generatedColumn)\n            return this.primaryKeys;\n\n        return this.primaryKeys.filter(primaryKey => {\n            return primaryKey.columnName !== generatedColumn.name;\n        });\n    }\n\n    get hasGeneratedColumn(): boolean {\n        return !!this.columns.find(column => column.isGenerated);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table schema to a new table schema with all properties cloned.\n     */\n    clone(): TableSchema {\n        const cloned = new TableSchema(this.name);\n        cloned.columns = this.columns.map(column => column.clone());\n        cloned.indices = this.indices.map(index => index.clone());\n        cloned.foreignKeys = this.foreignKeys.map(key => key.clone());\n        cloned.primaryKeys = this.primaryKeys.map(key => key.clone());\n        cloned.engine = this.engine;\n        return cloned;\n    }\n\n    /**\n     * Adds column schemas.\n     */\n    addColumns(columns: ColumnSchema[]) {\n        this.columns = this.columns.concat(columns);\n    }\n\n    /**\n     * Replaces given column.\n     */\n    replaceColumn(oldColumn: ColumnSchema, newColumn: ColumnSchema) {\n        this.columns[this.columns.indexOf(oldColumn)] = newColumn;\n    }\n\n    /**\n     * Removes a column schema from this table schema.\n     */\n    removeColumn(columnToRemove: ColumnSchema) {\n        const foundColumn = this.columns.find(column => column.name === columnToRemove.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n\n    /**\n     * Remove all column schemas from this table schema.\n     */\n    removeColumns(columns: ColumnSchema[]) {\n        columns.forEach(column => this.removeColumn(column));\n    }\n\n    /**\n     * Adds all given primary keys.\n     */\n    addPrimaryKeys(addedKeys: PrimaryKeySchema[]) {\n        addedKeys.forEach(key => this.primaryKeys.push(key));\n    }\n\n    /**\n     * Removes all given primary keys.\n     */\n    removePrimaryKeys(droppedKeys: PrimaryKeySchema[]) {\n        droppedKeys.forEach(key => {\n            this.primaryKeys.splice(this.primaryKeys.indexOf(key), 1);\n        });\n    }\n\n    /**\n     * Removes primary keys of the given columns.\n     */\n    removePrimaryKeysOfColumns(columns: ColumnSchema[]) {\n        this.primaryKeys = this.primaryKeys.filter(primaryKey => {\n            return !columns.find(column => column.name === primaryKey.columnName);\n        });\n    }\n\n    /**\n     * Adds foreign key schemas.\n     */\n    addForeignKeys(foreignKeys: ForeignKeySchema[]) {\n        this.foreignKeys = this.foreignKeys.concat(foreignKeys);\n    }\n\n    /**\n     * Removes foreign key from this table schema.\n     */\n    removeForeignKey(removedForeignKey: ForeignKeySchema) {\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name); // this must be by name\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n\n    /**\n     * Removes all foreign keys from this table schema.\n     */\n    removeForeignKeys(dbForeignKeys: ForeignKeySchema[]) {\n        dbForeignKeys.forEach(foreignKey => this.removeForeignKey(foreignKey));\n    }\n\n    /**\n     * Removes index schema from this table schema.\n     */\n    removeIndex(indexSchema: IndexSchema) {\n        const index = this.indices.find(index => index.name === indexSchema.name);\n        if (index)\n            this.indices.splice(this.indices.indexOf(index), 1);\n    }\n\n    /**\n     * Differentiate columns of this table schema and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(driver: Driver, columnMetadatas: ColumnMetadata[]): ColumnSchema[] {\n        return this.columns.filter(columnSchema => {\n            const columnMetadata = columnMetadatas.find(columnMetadata => columnMetadata.databaseName === columnSchema.name);\n            if (!columnMetadata)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(columnSchema.name, \"!==\", columnMetadata.databaseName); //  ||\n            // console.log(columnSchema.type, \"!==\", driver.normalizeType(columnMetadata)); // ||\n            // console.log(columnSchema.comment, \"!==\", columnMetadata.comment); //  ||\n            // console.log(this.compareDefaultValues(driver.normalizeDefault(columnMetadata), columnSchema.default)); // || // we included check for generated here, because generated columns already can have default values\n            // console.log(columnSchema.isNullable, \"!==\", columnMetadata.isNullable); //  ||\n            // console.log(columnSchema.isUnique, \"!==\", columnMetadata.isUnique); //  ||\n            // console.log(columnSchema.isGenerated, \"!==\", columnMetadata.isGenerated);\n\n            return  columnSchema.name !== columnMetadata.databaseName ||\n                    columnSchema.type !== driver.normalizeType(columnMetadata) ||\n                    columnSchema.comment !== columnMetadata.comment ||\n                    (!columnSchema.isGenerated && !this.compareDefaultValues(driver.normalizeDefault(columnMetadata), columnSchema.default)) || // we included check for generated here, because generated columns already can have default values\n                    columnSchema.isNullable !== columnMetadata.isNullable ||\n                    columnSchema.isUnique !== columnMetadata.isUnique ||\n                    // columnSchema.isPrimary !== columnMetadata.isPrimary ||\n                    columnSchema.isGenerated !== columnMetadata.isGenerated;\n        });\n    }\n\n    findColumnByName(name: string): ColumnSchema|undefined {\n        return this.columns.find(column => column.name === name);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    protected compareDefaultValues(columnMetadataValue: string, databaseValue: string): boolean {\n\n        // if (typeof columnMetadataValue === \"number\")\n        //     return columnMetadataValue === parseInt(databaseValue);\n        // if (typeof columnMetadataValue === \"boolean\")\n        //     return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        // if (typeof columnMetadataValue === \"function\")\n        // if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\")\n        //     return columnMetadataValue.toLowerCase() === databaseValue.toLowerCase();\n\n\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\n\n            // we need to cut out \"((x))\" where x number generated by mssql\n            columnMetadataValue = columnMetadataValue.replace(/\\(\\([0-9.]*\\)\\)$/g, \"$1\");\n            databaseValue = databaseValue.replace(/\\(\\(([0-9.]*?)\\)\\)$/g, \"$1\");\n\n            // we need to cut out \"(\" because in mssql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^\\(|\\)$/g, \"\");\n            databaseValue = databaseValue.replace(/^\\(|\\)$/g, \"\");\n\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n\n        // console.log(\"columnMetadataValue\", columnMetadataValue);\n        // console.log(\"databaseValue\", databaseValue);\n        return columnMetadataValue === databaseValue;\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table schema from a given entity metadata.\n     *\n     * todo: need deeper implementation\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver) {\n        const tableSchema = new TableSchema(entityMetadata.tableName);\n        tableSchema.engine = entityMetadata.engine;\n        entityMetadata.columns.forEach(column => {\n            tableSchema.columns.push(ColumnSchema.create(column, driver.normalizeType(column), driver.normalizeDefault(column)));\n        });\n\n        return tableSchema;\n    }\n\n}"],"sourceRoot":"../.."}