{"version":3,"sources":["../browser/src/connection/options-reader/ConnectionOptionsXmlReader.ts"],"names":[],"mappings":"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","file":"ConnectionOptionsXmlReader.js","sourcesContent":["import {PlatformTools} from \"../../platform/PlatformTools\";\nimport {ConnectionOptions} from \"../ConnectionOptions\";\n\n/**\n * Reads connection options defined in the xml file.\n */\nexport class ConnectionOptionsXmlReader {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from given xml file.\n     */\n    async read(path: string): Promise<ConnectionOptions[]> {\n        const xml = await this.readXml(path);\n        return (xml.connection as any[]).map(connection => {\n            return {\n                name: connection.$.name,\n                type: connection.$.type,\n                url: connection.url ? connection.url[0] : undefined,\n                host: connection.host ? connection.host[0] : undefined,\n                port: connection.port && connection.port[0] ? parseInt(connection.port[0]) : undefined,\n                username: connection.username ? connection.username[0] : undefined,\n                password: connection.password ? connection.password[0] : undefined,\n                database: connection.database ? connection.database[0] : undefined,\n                sid: connection.sid ? connection.sid[0] : undefined,\n                extra: connection.extra ? connection.extra[0] : undefined,\n                autoSchemaSync: connection.autoSchemaSync ? connection.autoSchemaSync[0] : undefined,\n                entities: connection.entities ? connection.entities[0].entity : [],\n                subscribers: connection.subscribers ? connection.subscribers[0].entity : [],\n                entitySchemas: connection.entitySchemas ? connection.entitySchemas[0].entity : [],\n                logging: connection.logging[0] ? connection.logging[0].split(\",\") : undefined,\n            };\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads xml file contents and returns them in a promise.\n     */\n    protected readXml(path: string): Promise<any> {\n        const xmlParser = PlatformTools.load(\"xml2js\").parseString;\n        const xmlOptions = { trim: true, explicitRoot: false };\n        return new Promise((ok, fail) => {\n            xmlParser(PlatformTools.readFileSync(path), xmlOptions, (err: any, result: any) => err ? fail(err) : ok(result));\n        });\n    }\n\n}"],"sourceRoot":"../.."}