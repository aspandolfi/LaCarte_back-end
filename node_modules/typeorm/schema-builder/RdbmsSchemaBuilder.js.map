{"version":3,"sources":["../../src/schema-builder/RdbmsSchemaBuilder.ts"],"names":[],"mappings":"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","file":"RdbmsSchemaBuilder.js","sourcesContent":["import {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {TableSchema} from \"./schema/TableSchema\";\nimport {ColumnSchema} from \"./schema/ColumnSchema\";\nimport {ForeignKeySchema} from \"./schema/ForeignKeySchema\";\nimport {IndexSchema} from \"./schema/IndexSchema\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {PrimaryKeySchema} from \"./schema/PrimaryKeySchema\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {Connection} from \"../connection/Connection\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * All synchronized tables in the database.\n     */\n    protected tableSchemas: TableSchema[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = await this.connection.createQueryRunner(\"master\");\n        this.tableSchemas = await this.loadTableSchemas();\n\n        await this.queryRunner.startTransaction();\n        try {\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            await this.queryRunner.commitTransaction();\n\n        } catch (error) {\n\n            try { // we throw original error even if rollback thrown an error\n                await this.queryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log(): Promise<(string|{ up: string, down: string })[]> {\n        this.queryRunner = await this.connection.createQueryRunner(\"master\");\n        try {\n            this.tableSchemas = await this.loadTableSchemas();\n            this.queryRunner.enableSqlMemory();\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache) // todo: check this functionality\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            return this.queryRunner.getMemorySql();\n\n        } finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all table schemas from the database.\n     */\n    protected loadTableSchemas(): Promise<TableSchema[]> {\n        const tableNames = this.entityToSyncMetadatas.map(metadata => metadata.tableName);\n        return this.queryRunner.loadTableSchemas(tableNames);\n    }\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => !metadata.skipSync && metadata.tableType !== \"single-table-child\");\n    }\n\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\n        await this.queryRunner.createSchema();\n        await this.dropOldForeignKeys();\n        // await this.dropOldPrimaryKeys(); // todo: need to drop primary column because column updates are not possible\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updateExistColumns();\n        await this.updatePrimaryKeys();\n        await this.createIndices(); // we need to create indices before foreign keys because foreign keys rely on unique indices\n        await this.createForeignKeys();\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the table schemas, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const foreignKeySchemasToDrop = tableSchema.foreignKeys.filter(foreignKeySchema => {\n                return !metadata.foreignKeys.find(metadataForeignKey => metadataForeignKey.name === foreignKeySchema.name);\n            });\n            if (foreignKeySchemasToDrop.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${tableSchema.name}: ${foreignKeySchemasToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // remove foreign keys from the table schema\n            tableSchema.removeForeignKeys(foreignKeySchemasToDrop);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemasToDrop);\n        });\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            // check if table does not exist yet\n            const existTableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (existTableSchema)\n                return;\n\n            this.connection.logger.logSchemaBuild(`creating a new table: ${metadata.tableName}`);\n\n            // create a new table schema and sync it in the database\n            const tableSchema = new TableSchema(metadata.tableName, this.metadataColumnsToColumnSchemas(metadata.columns), true, metadata.engine);\n            this.tableSchemas.push(tableSchema);\n            await this.queryRunner.createTable(tableSchema);\n        });\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected dropRemovedColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema) return;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedColumnSchemas = tableSchema.columns.filter(columnSchema => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === columnSchema.name);\n            });\n            if (droppedColumnSchemas.length === 0)\n                return;\n\n            // drop all foreign keys that has column to be removed in its columns\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\n                return this.dropColumnReferencedForeignKeys(metadata.tableName, droppedColumnSchema.name);\n            }));\n\n            // drop all indices that point to this column\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\n                return this.dropColumnReferencedIndices(metadata.tableName, droppedColumnSchema.name);\n            }));\n\n            this.connection.logger.logSchemaBuild(`columns dropped in ${tableSchema.name}: ` + droppedColumnSchemas.map(column => column.name).join(\", \"));\n\n            // remove columns from the table schema and primary keys of it if its used in the primary keys\n            tableSchema.removeColumns(droppedColumnSchemas);\n            tableSchema.removePrimaryKeysOfColumns(droppedColumnSchemas);\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(tableSchema, droppedColumnSchemas);\n        });\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected addNewColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !tableSchema.columns.find(columnSchema => columnSchema.name === columnMetadata.databaseName);\n            });\n            if (newColumnMetadatas.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\n\n            // create columns in the database\n            const newColumnSchemas = this.metadataColumnsToColumnSchemas(newColumnMetadatas);\n            await this.queryRunner.addColumns(tableSchema, newColumnSchemas);\n            tableSchema.addColumns(newColumnSchemas);\n        });\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected updateExistColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            const updatedColumnSchemas = tableSchema.findChangedColumns(this.connection.driver, metadata.columns);\n            if (updatedColumnSchemas.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`columns changed in ${tableSchema.name}. updating: ` + updatedColumnSchemas.map(column => column.name).join(\", \"));\n\n            // drop all foreign keys that point to this column\n            const dropRelatedForeignKeysPromises = updatedColumnSchemas\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.databaseName === changedColumnSchema.name))\n                .map(changedColumnSchema => this.dropColumnReferencedForeignKeys(metadata.tableName, changedColumnSchema.name));\n\n            // wait until all related foreign keys are dropped\n            await Promise.all(dropRelatedForeignKeysPromises);\n\n            // drop all indices that point to this column\n            const dropRelatedIndicesPromises = updatedColumnSchemas\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.databaseName === changedColumnSchema.name))\n                .map(changedColumnSchema => this.dropColumnReferencedIndices(metadata.tableName, changedColumnSchema.name));\n\n            // wait until all related indices are dropped\n            await Promise.all(dropRelatedIndicesPromises);\n\n            // generate a map of new/old columns\n            const newAndOldColumnSchemas = updatedColumnSchemas.map(changedColumnSchema => {\n                const columnMetadata = metadata.columns.find(column => column.databaseName === changedColumnSchema.name);\n                const newColumnSchema = ColumnSchema.create(columnMetadata!, this.connection.driver.normalizeType(columnMetadata!), this.connection.driver.normalizeDefault(columnMetadata!));\n                tableSchema.replaceColumn(changedColumnSchema, newColumnSchema);\n\n                return {\n                    newColumn: newColumnSchema,\n                    oldColumn: changedColumnSchema\n                };\n            });\n\n            return this.queryRunner.changeColumns(tableSchema, newAndOldColumnSchemas);\n        });\n    }\n\n    /**\n     * Creates primary keys which does not exist in the table yet.\n     */\n    protected updatePrimaryKeys() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName && !table.justCreated);\n            if (!tableSchema)\n                return;\n\n            const metadataPrimaryColumns = metadata.columns.filter(column => column.isPrimary && !column.isGenerated);\n            const addedKeys = metadataPrimaryColumns\n                .filter(primaryKey => {\n                    return !tableSchema.primaryKeysWithoutGenerated.find(dbPrimaryKey => dbPrimaryKey.columnName === primaryKey.databaseName);\n                })\n                .map(primaryKey => new PrimaryKeySchema(\"\", primaryKey.databaseName));\n\n            const droppedKeys = tableSchema.primaryKeysWithoutGenerated.filter(primaryKeySchema => {\n                return !metadataPrimaryColumns.find(primaryKeyMetadata => primaryKeyMetadata.databaseName === primaryKeySchema.columnName);\n            });\n\n            if (addedKeys.length === 0 && droppedKeys.length === 0)\n                return;\n\n            this.connection.logger.logSchemaBuild(`primary keys of ${tableSchema.name} has changed: dropped - ${droppedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}; added - ${addedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}`);\n            tableSchema.addPrimaryKeys(addedKeys);\n            tableSchema.removePrimaryKeys(droppedKeys);\n            await this.queryRunner.updatePrimaryKeys(tableSchema);\n        });\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected createForeignKeys() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\n                return !tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === foreignKey.name);\n            });\n            if (newKeys.length === 0)\n                return;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")}`);\n            await this.queryRunner.createForeignKeys(tableSchema, dbForeignKeys);\n            tableSchema.addForeignKeys(dbForeignKeys);\n        });\n    }\n\n    /**\n     * Creates indices which are missing in db yet, and drops indices which exist in the db,\n     * but does not exist in the metadata anymore.\n     */\n    protected createIndices() {\n        // return Promise.all(this.connection.entityMetadatas.map(metadata => this.createIndices(metadata.table, metadata.indices)));\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\n            if (!tableSchema)\n                return;\n\n            // drop all indices that exist in the table, but does not exist in the given composite indices\n            const dropQueries = tableSchema.indices\n                .filter(indexSchema => {\n                    const metadataIndex = metadata.indices.find(indexMetadata => indexMetadata.name === indexSchema.name);\n                    if (!metadataIndex)\n                        return true;\n                    if (metadataIndex.isUnique !== indexSchema.isUnique)\n                        return true;\n                    if (metadataIndex.columns.length !== indexSchema.columnNames.length)\n                        return true;\n                    if (metadataIndex.columns.findIndex((col, i) => col.databaseName !== indexSchema.columnNames[i]) !== -1)\n                        return true;\n                    \n                    return false;\n                })\n                .map(async indexSchema => {\n                    this.connection.logger.logSchemaBuild(`dropping an index: ${indexSchema.name}`);\n                    tableSchema.removeIndex(indexSchema);\n                    await this.queryRunner.dropIndex(metadata.tableName, indexSchema.name);\n                });\n\n            await Promise.all(dropQueries);\n\n            // then create table indices for all composite indices we have\n            const addQueries = metadata.indices\n                .filter(indexMetadata => !tableSchema.indices.find(indexSchema => indexSchema.name === indexMetadata.name))\n                .map(async indexMetadata => {\n                    const indexSchema = IndexSchema.create(indexMetadata);\n                    tableSchema.indices.push(indexSchema);\n                    this.connection.logger.logSchemaBuild(`adding new index: ${indexSchema.name}`);\n                    await this.queryRunner.createIndex(indexSchema.tableName, indexSchema);\n                });\n\n            await Promise.all(addQueries);\n        });\n    }\n\n    /**\n     * Drops all indices where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedIndices(tableName: string, columnName: string): Promise<void> {\n\n        const allIndexMetadatas = this.connection.entityMetadatas.reduce(\n            (all, metadata) => all.concat(metadata.indices),\n            [] as IndexMetadata[]\n        );\n\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\n        if (!tableSchema)\n            return;\n\n        // find depend indices to drop them\n        const dependIndices = allIndexMetadatas.filter(indexMetadata => {\n            return indexMetadata.tableName === tableName && !!indexMetadata.columns.find(column => column.databaseName === columnName);\n        });\n        if (!dependIndices.length)\n            return;\n\n        const dependIndicesInTable = tableSchema.indices.filter(indexSchema => {\n            return !!dependIndices.find(indexMetadata => indexSchema.name === indexMetadata.name);\n        });\n        if (dependIndicesInTable.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related indices of ${tableName}#${columnName}: ${dependIndicesInTable.map(index => index.name).join(\", \")}`);\n\n        const dropPromises = dependIndicesInTable.map(index => {\n            tableSchema.removeIndex(index);\n            return this.queryRunner.dropIndex(tableSchema.name, index.name);\n        });\n\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tableName: string, columnName: string): Promise<void> {\n\n        const allForeignKeyMetadatas = this.connection.entityMetadatas.reduce(\n            (all, metadata) => all.concat(metadata.foreignKeys),\n            [] as ForeignKeyMetadata[]\n        );\n\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\n        if (!tableSchema)\n            return;\n\n        // find depend foreign keys to drop them\n        const dependForeignKeys = allForeignKeyMetadatas.filter(foreignKey => {\n            if (foreignKey.tableName === tableName) {\n                return !!foreignKey.columns.find(fkColumn => {\n                    return fkColumn.databaseName === columnName;\n                });\n            } else if (foreignKey.referencedTableName === tableName) {\n                return !!foreignKey.referencedColumns.find(fkColumn => {\n                    return fkColumn.databaseName === columnName;\n                });\n            }\n            return false;\n        });\n        if (!dependForeignKeys.length)\n            return;\n\n        const dependForeignKeyInTable = dependForeignKeys.filter(fk => {\n            return !!tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === fk.name);\n        });\n        if (dependForeignKeyInTable.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableName}#${columnName}: ${dependForeignKeyInTable.map(foreignKey => foreignKey.name).join(\", \")}`);\n        const foreignKeySchemas = dependForeignKeyInTable.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\n        tableSchema.removeForeignKeys(foreignKeySchemas);\n        await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemas);\n    }\n\n    /**\n     * Creates new column schemas from the given column metadatas.\n     */\n    protected metadataColumnsToColumnSchemas(columns: ColumnMetadata[]): ColumnSchema[] {\n        return columns.map(columnMetadata => {\n            return ColumnSchema.create(\n                columnMetadata,\n                this.connection.driver.normalizeType(columnMetadata),\n                this.connection.driver.normalizeDefault(columnMetadata),\n            );\n        });\n    }\n\n}"],"sourceRoot":".."}