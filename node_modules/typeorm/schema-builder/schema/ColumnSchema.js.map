{"version":3,"sources":["../../src/schema-builder/schema/ColumnSchema.ts"],"names":[],"mappings":"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","file":"ColumnSchema.js","sourcesContent":["import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\n\n/**\n * Table's column's schema in the database represented in this class.\n */\nexport class ColumnSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string;\n\n    /**\n     * Column type.\n     */\n    type: string;\n\n    /**\n     * Column's default value.\n     */\n    default: any;\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     */\n    generationStrategy?: \"uuid\"|\"increment\";\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Indicates if column stores array.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Column's comment.\n     */\n    comment?: string;\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length?: number;\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string;\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: any[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: {\n        name?: string,\n        type?: string,\n        length?: number,\n        charset?: string,\n        collation?: string,\n        precision?: number,\n        scale?: number,\n        default?: any,\n        isNullable?: boolean,\n        isGenerated?: boolean,\n        generationStrategy?: \"uuid\"|\"increment\",\n        isPrimary?: boolean,\n        isUnique?: boolean,\n        comment?: string,\n        enum?: any[]\n    }) {\n        if (options) {\n            this.name = options.name || \"\";\n            this.type = options.type || \"\";\n            this.length = options.length;\n            this.charset = options.charset;\n            this.collation = options.collation;\n            this.precision = options.precision;\n            this.scale = options.scale;\n            this.default = options.default;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.generationStrategy = options.generationStrategy;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.comment = options.comment;\n            this.enum = options.enum;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column schema to a new column schema with exact same properties as this column schema has.\n     */\n    clone(): ColumnSchema {\n        const newColumnSchema = new ColumnSchema();\n        newColumnSchema.name = this.name;\n        newColumnSchema.type = this.type;\n        newColumnSchema.length = this.length;\n        newColumnSchema.charset = this.charset;\n        newColumnSchema.collation = this.collation;\n        newColumnSchema.precision = this.precision;\n        newColumnSchema.scale = this.scale;\n        newColumnSchema.enum = this.enum;\n        newColumnSchema.default = this.default;\n        newColumnSchema.isNullable = this.isNullable;\n        newColumnSchema.isGenerated = this.isGenerated;\n        newColumnSchema.generationStrategy = this.generationStrategy;\n        newColumnSchema.isPrimary = this.isPrimary;\n        newColumnSchema.isUnique = this.isUnique;\n        newColumnSchema.isArray = this.isArray;\n        newColumnSchema.comment = this.comment;\n        return newColumnSchema;\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new column based on the given column metadata.\n     */\n    static create(columnMetadata: ColumnMetadata, normalizedType: string, normalizedDefault: string): ColumnSchema {\n        const columnSchema = new ColumnSchema();\n        columnSchema.name = columnMetadata.databaseName;\n        columnSchema.length = columnMetadata.length;\n        columnSchema.charset = columnMetadata.charset;\n        columnSchema.collation = columnMetadata.collation;\n        columnSchema.precision = columnMetadata.precision;\n        columnSchema.scale = columnMetadata.scale;\n        columnSchema.default = normalizedDefault;\n        columnSchema.comment = columnMetadata.comment;\n        columnSchema.isGenerated = columnMetadata.isGenerated;\n        columnSchema.generationStrategy = columnMetadata.generationStrategy;\n        columnSchema.isNullable = columnMetadata.isNullable;\n        columnSchema.type = normalizedType;\n        columnSchema.isPrimary = columnMetadata.isPrimary;\n        columnSchema.isUnique = columnMetadata.isUnique;\n        columnSchema.isArray = columnMetadata.isArray || false;\n        columnSchema.enum = columnMetadata.enum;\n        return columnSchema;\n    }\n\n}"],"sourceRoot":"../.."}